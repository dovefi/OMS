# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-17 02:14
from __future__ import unicode_literals

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OmsUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=11, unique=True, verbose_name='user name')),
                ('email', models.EmailField(blank=True, max_length=30, unique=True, verbose_name='user email')),
                ('wechat', models.CharField(blank=True, max_length=20, verbose_name=['vb_wc'])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ModuleList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_name', models.CharField(max_length=20, verbose_name='module name')),
                ('module_caption', models.CharField(max_length=255, verbose_name='module caption')),
                ('module_extend', models.TextField(verbose_name='module extend')),
            ],
        ),
        migrations.CreateModel(
            name='ServerAppCateg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_categ_name', models.CharField(max_length=30, verbose_name='name of service application category ')),
            ],
        ),
        migrations.CreateModel(
            name='ServerFunCateg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_categ_name', models.CharField(max_length=20, verbose_name='name of service function category ')),
            ],
        ),
        migrations.CreateModel(
            name='ServerHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_id', models.IntegerField(verbose_name='history id')),
                ('history_user', models.CharField(max_length=15, verbose_name='history user')),
                ('history_datetime', models.DateTimeField(verbose_name='happen date')),
                ('db_datetime', models.DateTimeField(verbose_name='insert into db date')),
                ('history_command', models.CharField(max_length=255, verbose_name='history command')),
            ],
        ),
        migrations.CreateModel(
            name='ServerList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_name', models.CharField(max_length=13, verbose_name='server name')),
                ('server_wip', models.CharField(max_length=15, verbose_name='server public network ip')),
                ('server_lip', models.CharField(max_length=12, verbose_name='server inner network ip')),
                ('server_op', models.CharField(max_length=10, verbose_name='OS of server')),
                ('server_app_categ', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oms.ServerAppCateg', verbose_name='id of service application category')),
            ],
        ),
        migrations.AddField(
            model_name='serverhistory',
            name='server_list',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oms.ServerList', verbose_name='history of the server'),
        ),
        migrations.AddField(
            model_name='serverappcateg',
            name='server_fun_categ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oms.ServerFunCateg', verbose_name='foreign key,service function id,delete cascade '),
        ),
    ]
